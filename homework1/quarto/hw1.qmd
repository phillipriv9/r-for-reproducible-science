---
title: "hw1"
format:
  html:
    toc: true
editor: source
---
Package installation was done in normal code. Install.packages seems to not reocngize my CRAN mirror.


## Data Types 
* Character
* Numeric 
* logical - true and false
* interger - for integer numbers 
* complex - shows complex numbers
* raw - bitsreams

You can check this by using the typef() function and inputting the vector object

## Vectors R Code

```{r}
weight_g <- c(50,60,62,82)
weight_g

animals <- c("mouse", "rat", "dog")
animals


#Number of elements in the vector
length(weight_g)
length(animals)


#Data type of the vector
class(weight_g)
class(animals)

#Tells the structure of objects
str(weight_g)
str(animals)

#Adding other elements to the vector
weight_g <- c(weight_g, 90) #adds to end of the vector
weight_g <- c(30, weight_g) #adds to start of the vector

weight_g
```

## Subsetting vectors

```{r}

animals <- c("mouse","rat","cat","dog")
animals[2] # subsets one value

animals[c(3,2)] # subsets two values

more_animals <- animals[c(1,2,3,2,1,4)] # repeating indices
more_animals

```

R Indices start a 1, different from other languages (such as Java and Python)

# Conditional Subsetting

Subsets based on logical vectors

```{r}
weight_g[c(TRUE,FALSE,FALSE,TRUE,TRUE)]

weight_g > 50 #Will retun logicals with true that fufill the condition
#Subsets based on conditon given
weight_g[weight_g > 50]

#Can put multiple
weight_g[weight_g > 30 & weight_g < 65]

weight_g[weight_g <= 30 | weight_g == 62]

#Can be done on categorical data

animals[animals == "cat" | animals =="rat"]

#says what's in the vector

animals %in% c("rat","cat", "dog", "duck", "goat", "bird", "fish")

animals [animals %in% c("rat","cat", "dog", "duck", "goat", "bird", "fish")]


```

## Challenges

#Chal1

```{r}

Chal1Obj <- c(1,2,3,4,5,"dog")

```

#Chal2

```{r}

class(num_char <- c(1,2,3,"a"))
#Character
class(num_logical <- c(1,2,3,TRUE))
#Numeric
class(char_logical <- c("a","b","c",TRUE))
#Character
class(tricky <- c(1,2,3, "4"))
#Character
```

## Missing Values

```{r}
heights <- c(NA, 2,4,4,5,3)
mean(heights, na.rm = TRUE) #tells data to remove na from calc
max(heights, na.rm = TRUE)

##Extract elements that are not missing values
heights[!is.na(heights)]

##Return obj with NA removed
#returned obj is atomic vector of numeric type

na.omit(heights)

##Extract elements that r complete cases
#return obj is atomic vector of numeric type

heights[complete.cases(heights)]

```

#Chal3

Only value is "TRUE"

```{r}

combined_logical <- c(num_logical, char_logical)
```

#Chal4

logical -\> numeric -\> characer \<- logical

#Chal5

It goes in alpha order

#Chal5

```{r}
heights <- c(63, 69, 60, 65, NA, 68, 61, 70, 61, 59, 64, 69, 63, 63, NA, 72, 65, 64, 70, 63, 65)

heights_no_na <- na.omit(heights)

median(heights, na.rm = TRUE)

heights_no_na[na.omit(heights > 67)]
```
